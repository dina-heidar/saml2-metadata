https://medium.com/the-crazy-coder/visual-studio-copyright-notices-in-source-files-b95d7f427e97
 dotnet format MetadataBuilder.csproj =>run editorConfig


 spsso ->sso -->role

 EntityDescriptorType has items which is many roledescriptors
 EntitiesDescriptorType has items which has many entitydescriptors

 https://wiki.geant.org/display/eduGAIN/Rich+SP+metadata+example

1- SOAP binding ?
2- Singlelogout service count for SP
3- Artifact binding
4- POAS binding ? 
5- ECDSA signing  via extension 
	http://docs.oasis-open.org/security/saml/Post2.0/sstc-saml-metadata-algsupport-v1.0-cs01.html at 2.7 example heading
	https://groups.google.com/g/simplesamlphp/c/HSdZXaYUuRI/m/bdz7mQJLBgAJ
6- authcontext (override type of authentication eg forms vs windows)



Types of SAML2 binding (https://en.wikipedia.org/wiki/SAML_2.0)
1- SAML SOAP Binding (based on SOAP 1.1)
2- Reverse SOAP (PAOS) Binding 
	https://medium.com/@winma.15/saml-ecp-enhanced-client-or-proxy-profile-97f8fd051c6
	https://medium.com/@winma.15/soap-vs-paos-bindings-in-saml-9ce12a052a0f
3- HTTP Redirect Binding
4- HTTP POST Binding
5- HTTP Artifact Binding
6- SAML URI Binding


7- sign metadata
8- include public cert in metadata

https://www.wiktorzychla.com/2017/09/adfs-and-saml2-artifact-binding-woes.html

SP SingleLogoutService can any of these bindings redirect, post, artifact and soap. Soap is to accept backchannel logout from Idp when another Sp logs out.

Idp SingleLogoutService can be any of these bindings redirect, post, artifact and soap....???


1. when reading creating xml
use Microsoft.Security.Xml to create certficate data. This will create the KeyDescriptor element.

2.when signing the actual xml
use System.Security.Xml to sign the entire the xml. This will create the Signature element.

arrange mappers better
add the abiltity to add a Idp metadata address file instead of a url

add inhertinace od SamlSoap?


  //{
        //    get
        //    {
        //        var ee = RequestedAuthnContextType.FormsAuthentication;
        //        var t = RequestedAuthnContextType.Custom(
        //            new[]
        //        {
        //                AuthnContextRefTypes.Kerberose,
        //                AuthnContextRefTypes.IntegratedWindowsAuthentication
        //        }, ComparisonTypes.Minimum);

        //        return t;
        //    }
        //}