using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using MvcWeb.Models;
using Saml.MetadataBuilder;
using System.Security.Cryptography.X509Certificates;
using System.Xml;

namespace MvcWeb.Controllers;

public class BasicSpMetadataController : Controller
{
    private readonly ILogger<BasicSpMetadataController> logger;
    private readonly IMetadataWriter writer;

    public BasicSpMetadataController(ILogger<BasicSpMetadataController> logger,
        IMetadataWriter writer)
    {
        this.logger = logger;
        this.writer = writer;
    }

    [HttpGet]
    public IActionResult Create()
    {
        return View(new BasicSpMetadataViewModel());
    }

    [HttpPost]
    public async Task<XmlDocument> Create(BasicSpMetadataViewModel basicSpMetadataVm)
    {
        if (!basicSpMetadataVm.SigningCertificatePfx.IsNull())
        {
            basicSpMetadataVm.SigningCertificate = await GetX509Certificate2(basicSpMetadataVm.SignatureCertificatePfx);
        }

        var xml = writer.Output(basicSpMetadataVm);
        return xml;
    }

    private async Task<X509Certificate2> GetX509Certificate2(PfxFile pfxfile)
    {
        if (pfxfile.File.Length > 0)
        {
            // Uses Path.GetTempFileName to return a full path for a file, including the file name.
            var filePath = Path.GetTempFileName();

            using (var stream = System.IO.File.Create(filePath))
            {
                // The formFile is the method parameter which type is IFormFile
                // Saves the files to the local file system using a file name generated by the app.
                await pfxfile.File.CopyToAsync(stream);
            }
            return new X509Certificate2(filePath, pfxfile.Password, X509KeyStorageFlags.Exportable);
        }
        return null;
    }
}